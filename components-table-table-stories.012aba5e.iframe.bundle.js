"use strict";(self.webpackChunk_vr33ni_table_stenciljs=self.webpackChunk_vr33ni_table_stenciljs||[]).push([[591],{"./src/components/table/table.stories.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{IncludesButtons:()=>IncludesButtons,SetFilter:()=>SetFilter,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});const __WEBPACK_DEFAULT_EXPORT__={title:"Components/Table",args:{tableHeight:"auto",pagination:!1,paginationPageSize:10,currentPage:1,rowHeight:40,showLoading:!1},argTypes:{tableHeight:{table:{type:{summary:"Options",detail:'Default: "auto"\nExample for fixed height: "400px"'}}},paginationPageSize:{description:"Results per page: minimum 10 - maximum 30",control:{type:"number",min:10,max:30,step:10}},showLoading:{options:[!0,!1],control:{type:"radio"}},rowHeight:{options:["compact","default"],control:{type:"radio"}},enableFiltering:{options:[!0,!1],control:{type:"radio"}},filterOrientation:{options:["sideBar","topBar"],control:{type:"radio"}},columnDefs:{table:{type:{summary:"Column header options",detail:'Standard columns:\nheaderName: "Model", \nfield: "model", \nsortable: true (optional),\nsort: "desc" (optional) => descending sort (show icon)\nunSortIcon: true (optional) => unsorted (show icon)\n\nSpecial columns:\nheaderName: "",\nfield: "button"\nheaderName: "",\nfield: "link"'}}},rowData:{table:{type:{summary:"Row data options",detail:'Standard row values:\nmake: "Toyota", \nmodel: "Celica", \nprice: 35000 \n\nSpecial row values (incl buttons):\nmake: "Porsche",\nmodel: "Boxster",\nprice: "72000",\nbutton: { \ndisabled: false (optional),\nvariant: "outline" (optional)\nsize: "s" (optional),\ntext: "Button"\n...other button properties\n}'}}}}},DefaultTemplate=args=>{let columnFilters=args.columnDefs.map((column=>{let uniqueColValues=[...new Set(args.rowData.map((row=>row[column.field])))];return{name:column.field,options:uniqueColValues.map((option=>({label:option,value:option,selected:!1})))}})),myTable=document.createElement("my-table");return myTable.setAttribute("row-height",args.rowHeight),myTable.setAttribute("cols",JSON.stringify(args.columnDefs)),myTable.setAttribute("rows",JSON.stringify(args.rowData)),myTable.setAttribute("table-height",args.tableHeight),myTable.setAttribute("pagination",args.pagination),myTable.setAttribute("pagination-page-size",args.paginationPageSize),myTable.setAttribute("enable-filtering",args.enableFiltering),myTable.setAttribute("filter-orientation",args.filterOrientation),columnFilters.forEach(((columnFilter,index)=>{let filterType;switch(index){case 0:filterType="single-select";break;case 1:filterType="multi-select";break;default:filterType="text"}let mySetFilter=document.createElement("my-set-filter");mySetFilter.setAttribute("slot","set-filter"),mySetFilter.setAttribute("filter-name",columnFilter.name),mySetFilter.setAttribute("filter-label",`${filterType} filter for: ${columnFilter.name}`),mySetFilter.setAttribute("placeholder","Placeholder"),mySetFilter.setAttribute("type",filterType),["single-select","multi-select"].includes(filterType)&&mySetFilter.setAttribute("options",JSON.stringify(columnFilter.options)),myTable.appendChild(mySetFilter)})),myTable.outerHTML},IncludesButtons=DefaultTemplate.bind({});IncludesButtons.args={rowHeight:"default",columnDefs:[{headerName:"Make",field:"make",sortable:!0,sort:"desc",unSortIcon:!0},{headerName:"Model",field:"model",sortable:!0,unSortIcon:!0},{headerName:"Price",field:"price"},{headerName:"Age",field:"age"},{headerName:"",field:"button"}],rowData:[{make:"Toyota",model:"Celica",price:35e3,age:10,button:"something about Toyota"},{make:"Ford",model:"Mondeo",price:32e3,age:12,button:"something about Ford"},{make:"Porsche",model:"Boxster",price:72e3,button:{disabled:!1,variant:"secondary",size:"s",target:"_blank",color:"secondary",text:"Button"}}],enableFiltering:!1};const SetFilter=DefaultTemplate.bind({});SetFilter.args={rowHeight:"default",columnDefs:[{headerName:"Make",field:"make",sortable:!0,sort:"desc",unSortIcon:!0},{headerName:"Model",field:"model",sortable:!0,unSortIcon:!0},{headerName:"Price",field:"price"},{headerName:"Age",field:"age"}],rowData:[{make:"Toyota",model:"Celica",price:35e3,age:10},{make:"Ford",model:"Mondeo",price:32e3,age:12},{make:"Porsche",model:"Boxster",price:72e3},{make:"Bmw",model:"x",price:72e3},{make:"Mercedes",model:"y",price:72e3},{make:"Ferrari",model:"z",price:72e3},{make:"Chrysler",model:"a",price:72e3},{make:"Range rover",model:"b",price:72e3},{make:"Tesla",model:"x",price:72e3},{make:"Audi",model:"3",price:72e3},{make:"Landrover",model:"x",price:72e3}],enableFiltering:!0,filterOrientation:"topBar"},IncludesButtons.parameters={...IncludesButtons.parameters,docs:{...IncludesButtons.parameters?.docs,source:{originalSource:"args => {\n  let columnFilters = args.columnDefs.map(column => {\n    let uniqueColValues = [...new Set(args.rowData.map(row => row[column.field]))];\n    return {\n      name: column.field,\n      options: uniqueColValues.map(option => {\n        return {\n          label: option,\n          value: option,\n          selected: false\n        };\n      })\n    };\n  });\n\n  // Create main table element\n  let myTable = document.createElement('my-table');\n  myTable.setAttribute('row-height', args.rowHeight);\n  myTable.setAttribute('cols', JSON.stringify(args.columnDefs));\n  myTable.setAttribute('rows', JSON.stringify(args.rowData));\n  myTable.setAttribute('table-height', args.tableHeight);\n  myTable.setAttribute('pagination', args.pagination);\n  myTable.setAttribute('pagination-page-size', args.paginationPageSize);\n  myTable.setAttribute('enable-filtering', args.enableFiltering);\n  myTable.setAttribute('filter-orientation', args.filterOrientation);\n\n  // Create set-filter elements and append to main table element\n  columnFilters.forEach((columnFilter, index) => {\n    let filterType;\n    switch (index) {\n      case 0:\n        filterType = 'single-select';\n        break;\n      case 1:\n        filterType = 'multi-select';\n        break;\n      default:\n        filterType = 'text';\n    }\n    let mySetFilter = document.createElement('my-set-filter');\n    mySetFilter.setAttribute('slot', 'set-filter');\n    mySetFilter.setAttribute('filter-name', columnFilter.name);\n    mySetFilter.setAttribute('filter-label', `${filterType} filter for: ${columnFilter.name}`);\n    mySetFilter.setAttribute('placeholder', 'Placeholder');\n    mySetFilter.setAttribute('type', filterType);\n    if (['single-select', 'multi-select'].includes(filterType)) {\n      mySetFilter.setAttribute('options', JSON.stringify(columnFilter.options));\n    }\n    myTable.appendChild(mySetFilter);\n  });\n  return myTable.outerHTML;\n}",...IncludesButtons.parameters?.docs?.source}}},SetFilter.parameters={...SetFilter.parameters,docs:{...SetFilter.parameters?.docs,source:{originalSource:"args => {\n  let columnFilters = args.columnDefs.map(column => {\n    let uniqueColValues = [...new Set(args.rowData.map(row => row[column.field]))];\n    return {\n      name: column.field,\n      options: uniqueColValues.map(option => {\n        return {\n          label: option,\n          value: option,\n          selected: false\n        };\n      })\n    };\n  });\n\n  // Create main table element\n  let myTable = document.createElement('my-table');\n  myTable.setAttribute('row-height', args.rowHeight);\n  myTable.setAttribute('cols', JSON.stringify(args.columnDefs));\n  myTable.setAttribute('rows', JSON.stringify(args.rowData));\n  myTable.setAttribute('table-height', args.tableHeight);\n  myTable.setAttribute('pagination', args.pagination);\n  myTable.setAttribute('pagination-page-size', args.paginationPageSize);\n  myTable.setAttribute('enable-filtering', args.enableFiltering);\n  myTable.setAttribute('filter-orientation', args.filterOrientation);\n\n  // Create set-filter elements and append to main table element\n  columnFilters.forEach((columnFilter, index) => {\n    let filterType;\n    switch (index) {\n      case 0:\n        filterType = 'single-select';\n        break;\n      case 1:\n        filterType = 'multi-select';\n        break;\n      default:\n        filterType = 'text';\n    }\n    let mySetFilter = document.createElement('my-set-filter');\n    mySetFilter.setAttribute('slot', 'set-filter');\n    mySetFilter.setAttribute('filter-name', columnFilter.name);\n    mySetFilter.setAttribute('filter-label', `${filterType} filter for: ${columnFilter.name}`);\n    mySetFilter.setAttribute('placeholder', 'Placeholder');\n    mySetFilter.setAttribute('type', filterType);\n    if (['single-select', 'multi-select'].includes(filterType)) {\n      mySetFilter.setAttribute('options', JSON.stringify(columnFilter.options));\n    }\n    myTable.appendChild(mySetFilter);\n  });\n  return myTable.outerHTML;\n}",...SetFilter.parameters?.docs?.source}}};const __namedExportsOrder=["IncludesButtons","SetFilter"]}}]);